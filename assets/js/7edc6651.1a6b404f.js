"use strict";(self.webpackChunkdev_docs=self.webpackChunkdev_docs||[]).push([[3167],{9836:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var n=a(5893),s=a(1151);const r={id:"react-state",title:"React State",tags:["react","javascript","state"]},o=void 0,i={id:"react/react-state",title:"React State",description:"What is React State?",source:"@site/docs/react/react-state.md",sourceDirName:"react",slug:"/react/react-state",permalink:"/garden/react/react-state",draft:!1,unlisted:!1,tags:[{label:"react",permalink:"/garden/tags/react"},{label:"javascript",permalink:"/garden/tags/javascript"},{label:"state",permalink:"/garden/tags/state"}],version:"current",lastUpdatedBy:"minortypo",lastUpdatedAt:1721416791,formattedLastUpdatedAt:"Jul 19, 2024",frontMatter:{id:"react-state",title:"React State",tags:["react","javascript","state"]},sidebar:"docs",previous:{title:"React Props",permalink:"/garden/react/react-props"},next:{title:"Setup",permalink:"/garden/setup"}},c={},l=[{value:"What is React State?",id:"what-is-react-state",level:3},{value:"The useState hook",id:"the-usestate-hook",level:4}];function d(e){const t={a:"a",code:"code",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h3,{id:"what-is-react-state",children:"What is React State?"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.a,{href:"https://react.dev/learn/state-a-components-memory/",children:"Doc:"})," Components often need to change what\u2019s on the screen as a result of an interaction. Typing into the form should update the input field, clicking \u201cnext\u201d on an image carousel should change which image is displayed, clicking \u201cbuy\u201d should put a product in the shopping cart. Components need to \u201cremember\u201d things: the current input value, the current image, the shopping cart. In React, this kind of component-specific memory is called ",(0,n.jsx)(t.code,{children:"state"}),"."]}),"\n",(0,n.jsx)(t.hr,{}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"https://academind.com/tutorials/what-is-state",children:"What is State?"})}),"\n",(0,n.jsx)(t.p,{children:"We write components in React, A LOT of components, and many times we want them to undergo visual changes as a result of user or computer interactions. For this purpose, a component needs to \u201cremember\u201d things about itself. This is where state comes in. State is a component\u2019s memory."}),"\n",(0,n.jsx)(t.h4,{id:"the-usestate-hook",children:"The useState hook"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"useState"})," hook is a built-in hook in React that allows you to define state in a functional component. It takes an initial value as a parameter and returns an array with two elements that we can destructure to get:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"1 - The current state value"}),"\n",(0,n.jsx)(t.li,{children:"2 - A function to update the state value"}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["State definition with ",(0,n.jsx)(t.code,{children:"useState"})," commonly follows this pattern:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-js",children:"const [stateValue, setStateValue] = useState(initialValue);\r\n\r\n// simple project example:\r\nconst [backgroundColor, setBackgroundColor] = useState(initialColor);\n"})}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"backgroundColor"})," state is defined with the hook. Then on every button, we set up a click event handler that calls the ",(0,n.jsx)(t.code,{children:"setBackgroundColor"})," function with the corresponding value. Then, magically the new color is applied to the background."]}),"\n",(0,n.jsxs)(t.p,{children:["Adding more state variables should be as easy as adding more ",(0,n.jsx)(t.code,{children:"useState"})," calls."]})]})}function h(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},1151:(e,t,a)=>{a.d(t,{a:()=>o});var n=a(7294);const s={},r=n.createContext(s);function o(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}}}]);